import io
from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from Crypto.Cipher import AES, PKCS1_OAEP

#########################################################
#                        CIFRADO                        #
#########################################################
# Cadena UTF-8 a encriptar
cadena = "Hola StackOverflow en español"

# Trabajamos con bytes, codifcamos la cadena.
bin_data = cadena.encode("utf-8")

# Leemos el archivo con la clave publica
with open("public.pem", "rb") as f:
    recipient_key = f.read()

# Cargamos la clave pública (instancia de clase RSA)
key = RSA.importKey(recipient_key)

# Instancia del cifrador asimétrico
cipher_rsa = PKCS1_OAEP.new(key)

# Generamos una clave para el cifrado simétrico
aes_key = get_random_bytes(16)

# Encriptamos la clave del cifrado simétrico con la clave pública RSA
enc_aes_key = cipher_rsa.encrypt(aes_key)

# Encriptamos los datos mediante cifrado simétrico (AES en este caso)
cipher_aes = AES.new(aes_key, AES.MODE_EAX)
ciphertext, tag = cipher_aes.encrypt_and_digest(bin_data)

# Concatenamos la clave simétrica cifrada a los datoscifrados con ella
enc_data = b"".join((enc_aes_key, cipher_aes.nonce, tag, ciphertext))
print(enc_data)
# b'\x0f_r\xcd5%\x9a\x9bA\x14\xcdZ\xa9sl\'\x9d\xab\xea\xd2^1



#########################################################
#                     DESCIFRADO                        #
#########################################################

# Emulamos un fichero con nuestra cadena porque el método read facilita
# la división de cada parte de la cadena (datos y clave AES encriptada).
# Podríamos también obtenerlos simplemente mediante slicing de la cadena
data_file = io.BytesIO(enc_data)

# Leemos el archivo con la clave privada
with open("private.pem", "rb") as f:
    recipient_key = f.read()

# Cargamos la clave pública (instancia de clase RSA)
key = RSA.importKey(recipient_key,  passphrase="12345")

# Instancia del cifrador asimétrico
cipher_rsa = PKCS1_OAEP.new(key)

# Separamos las distintas partes de la cadena cifrada
enc_aes_key, nonce, tag, ciphertext =\
    (data_file.read(c) for c in (key.size_in_bytes(), 16, 16, -1))

# Desencriptamos la clave AES mediante la clave privada RSA
aes_key = cipher_rsa.decrypt(enc_aes_key)

# Desencriptamos los datos en si con la clave AES
cipher_aes = AES.new(aes_key, AES.MODE_EAX, nonce)
data = cipher_aes.decrypt_and_verify(ciphertext, tag)

# Decodificamos la cadena
cadena = data.decode("utf-8")
print(cadena)
#Hola StackOverflow en español 